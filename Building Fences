import kareltherobot.*;
import java.awt.Color;

public class BuildingFenceDriver implements Directions
{
    static int beeperLocation = (int)(Math.random()*10)+1;
    static int fenceLength = (int)(Math.random()*10)+1;
    static int fenceHeight = (int)(Math.random()*10)+1;
    static int numBeepers = 2*(fenceLength + fenceHeight) + 4;
    public static void main(String args[])  {
        Robot karel = new BuildingFences(1, 1, East, 0); 
        karel.run();
        karel.turnOff();  
    } 

    static {
        World.reset(); 
        World.setSize(beeperLocation + fenceHeight + 2, 6 + fenceLength);
        World.placeBeepers(beeperLocation, 1 , numBeepers);
        World.placeEWWall(beeperLocation, 5, fenceLength);
        World.placeEWWall(beeperLocation + fenceHeight, 5, fenceLength);
        World.placeNSWall(beeperLocation + 1, 4, fenceHeight);
        World.placeNSWall(beeperLocation + 1,4 + fenceLength, fenceHeight);
        World.setBeeperColor(Color.black);
        World.setStreetColor(Color.gray);
        World.setNeutroniumColor(Color.black);
        World.setDelay(10);  
        World.setVisible(true);
    }
}



##############################################

import kareltherobot.*;
import java.awt.Color;
public class BuildingFences extends Robot
    
{
   //instance data variables go here.
    int i;
    int j;
   public BuildingFences(int st, int av, Direction dir, int numBeepers) 
   {
       super (st, av, dir, numBeepers);
    }
    
   public void run()
    {
        pickBeep();
    }
    public void pickBeep () 
          {
       turnLeft();
       while (!nextToABeeper()) {
           if (!frontIsClear())
           {
               if (facingNorth())
               {
                   turnRight();
                   move();
                   turnRight();
               }
               if (facingSouth())
               {
                   turnLeft();
                   move();
                   turnLeft();
               }
           }
           if(frontIsClear())
           {
               move();
           }
       }    
       while (nextToABeeper())
       {
           pickBeeper();
       }
       find();
   }
   private void find() {
       move();
       turnRight();
       while (frontIsClear())
       {
           move();
       }
       plant();
   }
   private void plant()
   {
       while (anyBeepersInBeeperBag()) {
           if (!frontIsClear()) {
               turnLeft();
               putBeeper();
               move();
               turnRight();
           }
           if (frontIsClear()) {
               putBeeper();
               move();
               turnRight();
           }
       }
       end();
   }
   private void end() {
       turnLeft();
       turnLeft();
       while (frontIsClear()) {
           move();
       }
       turnLeft();
       while (frontIsClear()) {
           move();
       }
       turnLeft();
       turnLeft();
   }
   private void turnRight()
   {
       turnLeft();
       turnLeft();
       turnLeft();
   }
}

