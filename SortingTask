/**
   @Author:
      Date:
   Teacher: Boyko
  */
import kareltherobot.*;
import java.awt.Color;
public class SortingTaskDriver implements Directions
{
    public static void main(String args[])  {
        //Do NOT modify the code below
        //Robot stackBot = new Robot(1, 1,East, -1);
       
        //stackBot.setVisible(false);
        //stackBot.turnOff();
        
        
        //Your code goes here:
        SortingTask karel = new SortingTask(8, 1, West, 0);
        karel.run();
        karel.turnOff();  
    } 
    
   
    
    static {
        World.reset(); 
        World.readWorld("worlds/fig6-31.kwld"); 
        //World.readWorld("worlds/sortsolution.kwld");
        World.setBeeperColor(Color.black);
        World.setStreetColor(Color.gray);
        World.setNeutroniumColor(Color.black);
        World.setDelay(10);  
        World.setVisible(true);
    }
}



############################



/* 
 * @author Boyko
 * @version (a version number or a date)
 */
import kareltherobot.*;
public class SortingTask extends Robot
    
{
   //instance data variables go here.
   private int numberOfBeepers = 0;
   public SortingTask (int st, int av, Direction dir, int numBeepers)
   {
       super (st, av, dir, numBeepers);
   }
   public void run(){
    returnToOrigin();
    while (facingEast() == false){
       turnLeft();
    }
       for (int i = 0; i < 10; i++){
       for (int x = 0; x < 8; x++){
           if (nextToABeeper() == true){
               pickBeeper();
           }
           move();
       }
       turnAround();
       for (int y = 0; y < 8; y++){
           move();
           if (anyBeepersInBeeperBag() == true){
               putBeeper();
           }
       }
       turnRight();
       move();
       turnRight();
    }
    returnToOrigin();
   }
   public void turnRight(){
       for (int i = 0; i < 3; i++){
           turnLeft();
        }
   }
   public void turnAround(){
       turnLeft();
       turnLeft();
   }
      public void returnToOrigin(){
       while (facingNorth() == false){
           turnLeft();
       }
       turnLeft();
       while (frontIsClear() == true){
           move();
       }
       turnLeft();
       while (frontIsClear() == true){
           move();
       }
       while (facingNorth() == false){
           turnLeft();
       }
    }
}
